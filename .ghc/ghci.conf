-- Define dependencies
:set -package hscolour
:set -package pretty-show

-- Neat prompt
:set prompt "\001\ESC[33m\002λ\001\ESC[01;34m\002> \001\ESC[m\002"
-- :set prompt "λ> "

-- OverloadedStrings is often useful.
:set -XOverloadedStrings

-- Enable hoogle functions in repl
let escape arg = "'" ++ ((\c -> if c == '\'' then "'\"'\"'" else [c]) =<< arg) ++"'"
:def! search return . (":!hoogle --count=50 --color " ++) . escape
:def! doc return . (":!hoogle --count=50 --color --info " ++) . escape
:def! pf \str -> return $ ":! pointfree \"" ++ str ++ "\""


-- Set colored pretty printing
import qualified Text.Show.Pretty as Pretty
import qualified Language.Haskell.HsColour as HsColour
import qualified Language.Haskell.HsColour.Colourise as HsColour
import qualified Language.Haskell.HsColour.Output as HsColour

let myColourPrefs = HsColour.defaultColourPrefs { HsColour.conid = [HsColour.Foreground HsColour.Yellow, HsColour.Bold], HsColour.conop = [HsColour.Foreground HsColour.Yellow], HsColour.string = [HsColour.Foreground HsColour.Green], HsColour.char = [HsColour.Foreground HsColour.Cyan], HsColour.number = [HsColour.Foreground HsColour.Red, HsColour.Bold], HsColour.layout = [HsColour.Foreground HsColour.White], HsColour.keyglyph = [HsColour.Foreground HsColour.White] }

let prettyPrinter = putStrLn . HsColour.hscolour (HsColour.TTYg HsColour.XTerm256Compatible) myColourPrefs False False "" False . Pretty.ppShow

:set -interactive-print=prettyPrinter

-- Redefine reload so that we keep the pretty printing after reloading
:def reload return . const "::reload\n:script /home/oruud/.ghc/pretty-printer.conf"
