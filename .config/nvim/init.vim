"
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|
"
" Generated by: figlet
"
" Author: Ole Martin Ruud <dev@barskern.no>

" Source the base settings
runtime base.vim

" Setup Plugins {{{

call plug#begin('~/.local/share/nvim/plugged')

Plug 'airblade/vim-rooter'
Plug 'aklt/plantuml-syntax'
Plug 'axvr/zepl.vim'
Plug 'b4b4r07/vim-hcl'
Plug 'cespare/vim-toml', {'branch': 'main'}
Plug 'derekwyatt/vim-scala'
Plug 'dhruvasagar/vim-table-mode'
Plug 'editorconfig/editorconfig-vim'
Plug 'hashivim/vim-terraform'
Plug 'honza/vim-snippets'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'itchyny/lightline.vim'
Plug 'juliosueiras/vim-terraform-completion'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/vim-easy-align'
Plug 'Konfekt/FastFold'
Plug 'lepture/vim-jinja'
Plug 'lervag/vimtex'
Plug 'liuchengxu/vista.vim'
Plug 'majutsushi/tagbar'
Plug 'markonm/traces.vim'
Plug 'mattn/emmet-vim'
Plug 'mattn/webapi-vim'
Plug 'mxw/vim-jsx'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neovimhaskell/haskell-vim'
Plug 'pangloss/vim-javascript'
Plug 'parsonsmatt/intero-neovim'
Plug 'plasticboy/vim-markdown'
Plug 'rbgrouleff/bclose.vim'
Plug 'rodjek/vim-puppet'
Plug 'ron-rs/ron.vim'
Plug 'ron89/thesaurus_query.vim'
Plug 'rust-lang/rust.vim'
Plug 'sakhnik/nvim-gdb', { 'do': './install.sh' }
Plug 'Shougo/context_filetype.vim'
Plug 'Shougo/neco-syntax'
Plug 'srcery-colors/srcery-vim'
Plug 'StanAngeloff/php.vim'
Plug 'tikhomirov/vim-glsl'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dadbod'
Plug 'tpope/vim-dotenv'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-jdaddy'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'vim-python/python-syntax'
Plug 'vim-ruby/vim-ruby'

" Plug 'vim-pandoc/vim-pandoc'
" Plug 'vim-pandoc/vim-pandoc-syntax'

call plug#end()

" }}}

" Generic settings {{{

filetype plugin on
syntax on

" Set language settings
set spelllang=en

" Paste mode (disables autoindent etc)
set pastetoggle=<F2>

if has('autocmd')
	augroup autowriteread
		autocmd!
		" Save whenever switching windows or leaving vim. This is useful when running
		" the tests inside vim without having to save all files first.
		autocmd FocusLost,WinLeave * :silent! noautocmd wa

		" Trigger autoread when changing buffers or coming back to vim.
		autocmd FocusGained,BufEnter * :silent! !
	augroup END

endif

" Use ripgrep as grep
if executable('rg')
	set grepprg=rg\ --vimgrep
	set grepformat=%f:%l:%c:%m
endif

" Automatically read on filechange outside of vim.
set autoread
" Automatically write to file when performing certain commands.
set autowrite

" Command to convert spaces to tabs for a range
" See https://vim.fandom.com/wiki/Super_retab
:command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g

" Enable soft wrapping (vim.wikia.com/wiki/Word_wrap_without_line_breaks)
"set wrap
"set nolist

" Prevent ins-completion-menu popups
"set completeopt-=preview
"set completeopt+=noinsert

" Colorscheme
colorscheme srcery
let g:srcery_italic = 1

" Backup, swap and undo
set undofile
set undolevels=1000
set undoreload=10000
set swapfile

" }}}

" Plugin settings {{{

" thesaurus_query
let g:tq_enabled_backends=["datamuse_com"]
let g:tq_mthesaur_file="~/.config/nvim/thesaurus/mthesaur.txt"

" python-syntax
let g:python_highlight_all = 1

" fzf.vim
let g:fzf_tags_command = "ctags -R src"

" vista
let g:vista_sidebar_width = 50

" vimtex
let g:vimtex_compiler_method = 'tectonic'
let g:tex_flavor = 'latex'
let g:vimtex_format_enabled = 1
let g:vimtex_view_method = 'zathura'

" coc.nvim

" Disable coc on startup because simple file viewings don't need it!
let g:coc_start_at_startup = 0
" Better display for messages
set cmdheight=2
" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300
" Install coc extensions
let g:coc_global_extensions = [
	\ "coc-actions",
	\ "coc-css",
	\ "coc-diagnostic",
	\ "coc-dictionary",
	\ "coc-emmet",
	\ "coc-emoji",
	\ "coc-git",
	\ "coc-highlight",
	\ "coc-html",
	\ "coc-json",
	\ "coc-ltex",
	\ "coc-pyright",
	\ "coc-rust-analyzer",
	\ "coc-snippets",
	\ "coc-solargraph",
	\ "coc-tailwindcss",
	\ "coc-vimtex",
	\ "coc-yaml"
	\ ]

augroup coc_autocmds
	autocmd!
	" Setup formatexpr specified filetype(s).
	autocmd FileType yaml,css,scala,rust,html,json,css setl formatexpr=CocAction('formatSelected')
	" Update signature help on jump placeholder
	autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" goyo.vim

" taken from https://github.com/junegunn/goyo.vim/issues/16
function! s:goyo_enter()
	let b:quitting = 0
	let b:quitting_bang = 0
	autocmd QuitPre <buffer> let b:quitting = 1
	cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
	" Quit Vim if this is the only remaining buffer
	if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
		if b:quitting_bang
			qa!
		else
			qa
		endif
	endif
endfunction

autocmd! User GoyoEnter call <SID>goyo_enter()
autocmd! User GoyoLeave call <SID>goyo_leave()

" vim-rooter

let g:rooter_patterns = ['.git', '.git/', 'Cargo.toml', 'build.sbt']

" Fetch a env variable using vim-dotenv if it exist
function! s:env(var) abort
	return exists('*DotenvGet') ? DotenvGet(a:var) : eval('$'.a:var)
endfunction

" dadbod
let g:db = s:env('DATABASE_URL')

" intero-neovim
let g:intero_prompt_regex = '[^-]> '
let g:intero_window_size = 20

let g:intero_backend = {
\ 'command': 'stack ghci',
\ 'options': '--ghci-options "-w -ghci-script /home/oruud/.ghc/pretty-printer.conf"',
\ 'cwd': expand('%:p:h'),
\}

" rust.vim settings
let g:rust_fold = 0
let g:rust_clip_command = 'xclip -selection clipboard'

" vim-go settings
let g:go_list_type = "none"

" lightline settings
let g:lightline = {}
"
let g:lightline.component_function = {
\  'gitbranch': 'FugitiveHead',
\  'cocstatus': 'coc#status'
\}

let g:lightline.colorscheme = 'srcery'

let g:lightline.active = {
\ 'left': [ [ 'mode', 'paste' ],
\           [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
\ 'right': [ [ 'lineinfo', 'percent' ],
\            [ 'fileformat', 'fileencoding', 'filetype' ],
\            [ 'cocstatus' ] ],
\}

" Use auocmd to force lightline update.
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()

" pandoc-vim settings
" let g:pandoc#syntax#conceal#use=0
" let g:pandoc#spell#enabled=0

" vim-markdown
" let g:vim_markdown_conceal = 0
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_toml_frontmatter = 1
let g:tex_conceal = ""
let g:vim_markdown_math = 1

" editorconfig-vim
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" nvim-gdb
let g:nvimgdb_disable_start_keymaps = 1

" vim-table-mode
let g:table_mode_map_prefix = '<Leader>\|'
let g:table_mode_update_time = 300
let g:table_mode_corner = '|'
let g:table_mode_corner_corner = '|'
let g:table_mode_header_fillchar = '-'

" emmet.vim
"let g:user_emmet_install_global = 0
let g:user_emmet_leader_key = ',e'

" }}}

" Custom commands {{{

" choose from signatures and apply to current buffer
function! s:read_signature_into_buffer(signature)
	" has to be a function to avoid the extra space fzf#run insers otherwise
	let save_pos = getpos(".")

	" delete old signature
	execute '/^--\s\?$/;.1,$ d'

	" add selected signature at end
	execute '$r ~/.config/mutt/'.a:signature

	" jump back to where we started
	call setpos(".", save_pos)
endfunction

command! -bang -nargs=* ChangeSignature call fzf#run(fzf#wrap({
			\   'source': map(split(globpath('~/.config/mutt', 'signature.*')), 'fnamemodify(v:val, ":t")'),
			\   'sink': function('<sid>read_signature_into_buffer')
			\ }))

" }}}

" Keybindings {{{

" coc.nvim

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <C-x><C-z> coc#pum#visible() ? coc#pum#stop() : "\<C-x>\<C-z>"

" remap for complete to use tab and <cr>
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1):
        \ <SID>check_back_space() ? "\<Tab>" :
        \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Applying code actions to the selected code block.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for apply code actions at the cursor position.
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer.
nmap <leader>as  <Plug>(coc-codeaction-source)

" Remap keys for apply refactor code actions.
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Remap keys for gotos
nmap <silent> <leader>ls :CocStart<CR>
nmap <leader>lD :CocDiagnostics<CR>
nmap <silent> <leader>ld <Plug>(coc-definition)
nmap <silent> <leader>lt <Plug>(coc-type-definition)
nmap <silent> <leader>i <Plug>(coc-implementation)
nmap <silent> <leader>lr <Plug>(coc-references)
nmap <silent> <leader>lf <Plug>(coc-fix-current)
nmap <silent> <leader>lc <Plug>(coc-codelens-action)

" Format using F
nmap <leader>F :Format<CR>

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" fzf commands for
nnoremap <leader>f :Files<CR>
nnoremap <leader>L :Lines<CR>
nnoremap <leader>t :Tags<CR>
nnoremap <leader>rr :Rg<CR>
nnoremap <leader>bb :Buffers<CR>

" Starting nvim-gdb
nnoremap <leader>dd :GdbStart gdb -q <C-R>=expand('%:r')<CR><CR>
nnoremap <leader>dD :GdbStart gdb -q<Space>
nnoremap <leader>dl :GdbStartLLDB lldb <C-R>=expand('%:r')<CR><CR>
nnoremap <leader>dL :GdbStartLLDB lldb<Space>

" vim-fugitive commands
map <leader>gg :Git<CR>
map <leader>gw :Gwrite<CR>
map <leader>gW :Gwrite!<CR>
map <leader>gc :Git commit -v<CR>
map <leader>gb :Git_blame<CR>
map <leader>gm :Git_mergetool<CR>
map <leader>gB :GBrowse<CR>
map <leader>gl :0Gclog<CR>
map <leader>gp :Git push<CR>
map <leader>gP :Git pull<CR>

" Toggle tagbar
nmap <F8> :TagbarToggle<CR>

" Use easy align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Open file in urlview to follow url
noremap <leader>u :w<Home>silent <End> !urlview<CR>

" Run make in background
nnoremap <silent> <leader>m :call jobstart('make')<CR>

" }}}

" Filetype snippets and settings {{{

if has('autocmd')

	augroup ampl
		autocmd!
		autocmd BufNewFile,BufRead *.mod  set ft=ampl
		autocmd BufNewFile,BufRead *.dat  set ft=ampl
		autocmd BufNewFile,BufRead *.ampl set ft=ampl
	augroup END

	augroup scheme
		autocmd!
		autocmd FileType scheme set tabstop=2 softtabstop=2 shiftwidth=2
	augroup END

	augroup hcl
		autocmd!
		autocmd FileType hcl set expandtab tabstop=2 softtabstop=2 shiftwidth=2
	augroup END

	augroup terraform
		autocmd!
		autocmd FileType terraform set expandtab tabstop=2 softtabstop=2 shiftwidth=2
	augroup END

	augroup terminals
		autocmd!
		autocmd TermOpen * setlocal nonumber norelativenumber scrolloff=0
	augroup END

	augroup json
		autocmd!
		autocmd FileType json set conceallevel=0
	augroup END

	augroup haskell
		autocmd!
		" Background process and window management
		autocmd FileType haskell nnoremap <silent> <leader>is :InteroStart<CR>
		autocmd FileType haskell nnoremap <silent> <leader>ik :InteroKill<CR>

		" Open intero/GHCi split horizontally
		autocmd FileType haskell nnoremap <silent> <leader>io :InteroOpen<CR>
		" Open intero/GHCi split vertically
		autocmd FileType haskell nnoremap <silent> <leader>iov :InteroOpen<CR><C-W>H
		autocmd FileType haskell nnoremap <silent> <leader>ih :InteroHide<CR>

		" Reloading (pick one)
		" Automatically reload on save
		autocmd BufWritePost *.hs InteroReload

		" Load individual modules
		autocmd FileType haskell nnoremap <silent> <leader>il :InteroLoadCurrentModule<CR>
		autocmd FileType haskell nnoremap <silent> <leader>if :InteroLoadCurrentFile<CR>

		" Type-related information
		" Heads up! These next two differ from the rest.
		autocmd FileType haskell map <silent> <leader>t <Plug>InteroGenericType
		autocmd FileType haskell map <silent> <leader>T <Plug>InteroType
		autocmd FileType haskell nnoremap <silent> <leader>it :InteroTypeInsert<CR>

		" Navigation
		autocmd FileType haskell nnoremap <silent> <leader>jd :InteroGoToDef<CR>

		" Managing targets
		" Prompts you to enter targets (no silent):
		autocmd FileType haskell nnoremap <leader>ist :InteroSetTargets<SPACE>
	augroup END

	augroup c
		autocmd!
		autocmd FileType c inoremap <F5> <Esc>:!gcc -g -o %< %<CR>
		autocmd FileType c nnoremap <F5> :!gcc -g -o %< %<CR>
		autocmd FileType c inoremap <F6> <Esc>:!gcc -g -o %< % && ./%<<CR>
		autocmd FileType c nnoremap <F6> :!gcc -g -o %< % && ./%<<CR>
	augroup END

	augroup cpp
		autocmd!
		autocmd FileType cpp inoremap <F5> <Esc>:!g++ -g -o %< %<CR>
		autocmd FileType cpp nnoremap <F5> :!g++ -g -o %< %<CR>
		autocmd FileType cpp inoremap <F6> <Esc>:!g++ -g -o %< % && ./%<<CR>
		autocmd FileType cpp nnoremap <F6> :!g++ -g -o %< % && ./%<<CR>

		autocmd FileType cpp set tabstop=2
		autocmd FileType cpp set softtabstop=2
		autocmd FileType cpp set shiftwidth=2
	augroup END

	augroup yaml
		autocmd!
		autocmd FileType yaml set tabstop=2
		autocmd FileType yaml set softtabstop=2
		autocmd FileType yaml set shiftwidth=2
	augroup END

	augroup rust
		autocmd!
		autocmd FileType rust inoremap <F5> <Esc>:Cbuild<CR>
		autocmd FileType rust nnoremap <F5> :Cbuild<CR>
		autocmd FileType rust inoremap <F6> <Esc>:Crun<CR>
		autocmd FileType rust nnoremap <F6> :Crun<CR>

		" Run all tests
		autocmd FileType rust inoremap <F7> <Esc>:Ctest<CR>
		autocmd FileType rust nnoremap <F7> :Ctest<CR>

		" Run single test
		autocmd FileType rust inoremap <F8> <Esc>:RustTest<CR>
		autocmd FileType rust nnoremap <F8> :RustTest<CR>
	augroup END

	augroup markdown
		autocmd!
		autocmd FileType markdown inoremap <F5> <Esc>:PandocCompile<CR>
		autocmd FileType markdown nnoremap <F5> :PandocCompile<CR>
		autocmd FileType markdown inoremap <F6> <Esc>:PandocPreview<CR>
		autocmd FileType markdown nnoremap <F6> :PandocPreview<CR>
	augroup END

	augroup golang
		autocmd!
		autocmd FileType go inoremap <F5> <Esc>:GoBuild<CR>
		autocmd FileType go nnoremap <F5> :GoBuild<CR>
		autocmd FileType go inoremap <F6> <Esc>:GoRun<CR>
		autocmd FileType go nnoremap <F6> :GoRun<CR>
		autocmd FileType go inoremap <F7> <Esc>:GoTest<CR>
		autocmd FileType go nnoremap <F7> :GoTest<CR>
	augroup END

	augroup mail
		autocmd!
		autocmd FileType mail set wrap linebreak nolist tw=0
		" Workaround due to lightline not being enabled (https://github.com/junegunn/goyo.vim/issues/207)
		autocmd FileType mail call lightline#init()
		autocmd FileType mail :Goyo

		" Delete to signature
		autocmd FileType mail nmap <buffer> <leader>md d/^--\s\?$<CR>
		autocmd FileType mail nmap <buffer> <leader>ms :ChangeSignature<CR>
	augroup END

	augroup jinja
		autocmd!
		autocmd BufNewFile,BufRead *.tera set ft=jinja expandtab
	augroup END

	augroup css
		autocmd!
		autocmd BufNewFile,BufRead *.css set expandtab
	augroup END

	augroup pythonn
		autocmd!
		autocmd FileType python let b:coc_root_patterns = ['.git', '.env', 'venv', '.venv', 'setup.cfg', 'setup.py', 'pyproject.toml', 'pyrightconfig.json']

		autocmd FileType python nmap <buffer> <F5> :w<CR>:exec '!poetry run python' shellescape(@%, 1)<CR>
		autocmd FileType python imap <buffer> <F5> <esc>:w<CR>:exec '!poetry run python' shellescape(@%, 1)<CR>
	augroup END

endif

" }}}

" vim: foldmethod=marker:ts=2:sw=2
