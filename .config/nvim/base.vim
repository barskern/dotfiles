"        _                      _
" __   _(_)_ __ ___  _ __ ___  | |__   __ _ ___  ___
" \ \ / / | '_ ` _ \| '__/ __| | '_ \ / _` / __|/ _ \
"  \ V /| | | | | | | | | (__  | |_) | (_| \__ \  __/
"   \_/ |_|_| |_| |_|_|  \___| |_.__/ \__,_|___/\___|
"
" Generated by: figlet
"
" Author: Ole Martin Ruud <dev@barskern.no>

" Disable plugins in Vi-mode
if v:progname ==# 'vi'
	set noloadplugins
endif

" Compatibility is for losers!
set nocompatible

" Settings {{{

" Set dynamic title
set title
set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:h\")})%)%(\ %a%)

" Settings for diffmode
set diffopt+=vertical

" Set encoding
set encoding=utf-8
scriptencoding utf-8

" Set mapping of local leader
let mapleader = ","
let maplocalleader = ";"

" Set numberline settings
set number
set relativenumber

if has('autocmd')
	augroup togglerelnumbers
		autocmd!
		" Turn off relative numbers in insert mode
		autocmd InsertEnter,BufLeave,WinLeave,FocusLost *
					\ if &l:number && empty(&buftype) |
					\ setlocal norelativenumber |
					\ endif
		" Turn on relative numbers in normal mode
		autocmd InsertLeave,BufEnter,WinEnter,FocusGained *
					\ if &l:number && empty(&buftype) |
					\ setlocal relativenumber |
					\ endif
	augroup end
endif

" Set search settings
set incsearch
set hlsearch

" Misc settings
set scrolloff=2
set ruler
set showcmd
set noshowmode
set laststatus=2
set splitbelow
set splitright
set nojoinspaces
set signcolumn=yes

" Indentation and formatting settings
set noexpandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set autoindent
set smartindent
" set cursorline

" Enable soft wrapping (vim.wikia.com/wiki/Word_wrap_without_line_breaks)
"set wrap
"set nolist

" Enable hard wrapping
set list
set linebreak
set tw=80
set formatoptions=jcrql

" Prevent ins-completion-menu popups
set shortmess+=c

" Colorscheme (figure out how to do this without plugin..)
" colorscheme srcery
" let g:srcery_italic = 1

" Required for operations modifying multiple buffers like rename.
set hidden

" Set netrw settings
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_winsize = 70

" Customized version of folded text made by
" https://github.com/chrisbra/vim_dotfiles/blob/master/plugin/CustomFoldText.vim,
" based on the idea by
" http://www.gregsexton.org/2011/03/improving-the-text-displayed-in-a-fold/
fu! CustomFoldText(string)
	" Get first non-blank line
	let fs = v:foldstart
	if getline(fs) =~ '^\s*$'
		let fs = nextnonblank(fs + 1)
	endif
	if fs > v:foldend
		let line = getline(v:foldstart)
	else
		let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
	endif
	let pat  = matchstr(&l:cms, '^\V\.\{-}\ze%s\m')

	" Remove leading comments from line
	let line = substitute(line, '^\s*'.pat.'\s*', '', '')

	" Remove foldmarker from line
	let pat  = '\%('. pat. '\)\?\s*'. split(&l:fmr, ',')[0]. '\s*\d\+'
	let line = substitute(line, pat, '', '')

	" let line = substitute(line, matchstr(&l:cms,
	" \ '^.\{-}\ze%s').'\?\s*'. split(&l:fmr,',')[0].'\s*\d\+', '', '')

	let w = get(g:, 'custom_foldtext_max_width', winwidth(0)) - &foldcolumn - (&number ? 8 : 0)
	let foldSize = 1 + v:foldend - v:foldstart
	let foldSizeStr = " " . foldSize . " lines "
	let foldLevelStr = '+'. v:folddashes
	let lineCount = line("$")
	if has("float")
		try
			let foldPercentage = printf("[%2.0f", (foldSize*1.0)/lineCount*100) . "%] "
		catch /^Vim\%((\a\+)\)\=:E806/	" E806: Using Float as String
			let foldPercentage = printf("[of %d lines] ", lineCount)
		endtry
	endif
	if exists("*strwdith")
		let expansionString = repeat(a:string, w - 2 - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
	else
		let expansionString = repeat(a:string, w - 2 - strlen(substitute(foldSizeStr.line.foldLevelStr.foldPercentage, '.', 'x', 'g')))
	endif
	return 'âŸ« ' . line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endf

set foldtext=CustomFoldText('.')

" }}}

" Keybinds {{{

" Exit terminal mode with ESC
tnoremap <Esc> <C-\><C-n>

" Open and close quickfix
nnoremap <C-l> :copen<cr>
nnoremap <C-g> :cclose<cr>

" Search results unfolded please
nnoremap <silent> n nzv
nnoremap <silent> N Nzv
nnoremap <silent> g* g*zv

" Quiting shortcuts
nnoremap <leader>q :q<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>W :w !sudo tee >/dev/null %<CR>
nnoremap <leader>x :xit<CR>

" Make j and k work with both relativenumbers and softwrapped text
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" Clear highlight
nmap <silent> <BS> :nohlsearch<CR>

" Open the selected text in a split (i.e. should be a file).
map <leader>o "oyaW:sp <C-R>o<CR>
xnoremap <leader>o "oy<Esc>:sp <C-R>o<CR>
vnoremap <leader>o "oy<Esc>:sp <C-R>o<CR>

" Search for selected text in visual mode
vnoremap // y/<C-R>"<CR>

" Replace all is aliased to S.
nnoremap S :%s/

" Copy selected text to system clipboard (requires gvim installed):
vnoremap <silent> <C-c> "*y :let @+=@*<CR>
map <C-p> "*p

" Navigating with guides
inoremap <leader><leader> <Esc>/<++><CR>"_c4l
vnoremap <leader><leader> <Esc>/<++><CR>"_c4l
map <leader><leader> <Esc>/<++><CR>"_c4l

" }}}

" vim: foldmethod=marker:ts=2:sw=2
