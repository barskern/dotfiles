#!/bin/zsh
#
# yumusic
#

set -e

BASE_URL=${BASE_URL:-"https://youtube.com/watch/?v="}
ID_REGEX=${ID_REGEX:-"^[A-Za-z0-9\-\_]{11}$"}

MUSIC_DIR=${MUSIC_DIR:-"$(xdg-user-dir MUSIC)"}
AUDIO_FMT=${AUDIO_FMT:-"mp3"}
AUDIO_QUALITY=${AUDIO_QUALITY:-"0"}

CACHE_DIR="${XDG_CACHE_HOME:-"$HOME/.cache"}/yumusic"

is_valid_id() {
	id=$1
	[[ $id =~ $ID_REGEX ]]
	return 0
}

ids=()
while read id; do
	# Filter out invalid ids
	if is_valid_id "$id"; then
		ids+=("$id")
	else
		echo "invalid id: $id"
	fi
done < "${1:-/dev/stdin}"

[[ "${#ids[@]}" = 0 ]] && { echo "Error: command must be run with input from stdin or a filename as first parameter"; exit 1; }

# Send all valid ids to downloader
echo "${ids[@]}" | tr ' ' '\n' | awk -v URL="$BASE_URL" '{print URL$1}' \
	| youtube-dl \
	--ignore-errors \
	--continue \
	--no-overwrites \
	--no-post-overwrites \
	--embed-thumbnail \
	--batch-file - \
	--output "$CACHE_DIR/%(id)s.%(ext)s" \
	--write-info-json \
	--extract-audio \
	--audio-format "$AUDIO_FMT" \
	--audio-quality "$AUDIO_QUALITY" \
	--prefer-ffmpeg --hls-prefer-ffmpeg || true

# Verify titles and artists
songs=()
for id in "${ids[@]}"; do
	if [[ -f $CACHE_DIR/$id.info.json ]]
	then
		title="$(jq -rj '.title' $CACHE_DIR/$id.info.json)"
		uploader="$(jq -rj '.uploader' $CACHE_DIR/$id.info.json)"
		date="$(jq -rj '.upload_date' $CACHE_DIR/$id.info.json)"

		ftitle=$(echo $title | sed 's/^.*\ \-\ //' | awk '{$1=$1}1' | tr -d '"')
		fartist=$(echo $title | sed 's/\ \-\ .*$//' | awk '{$1=$1}1' | tr -d '"')
		if [[ "$ftitle" == "$fartist" ]]
		then
			# Artist and title is equal, which means that there is no '-' in the
			# title, hence fallback to specifying the uploader as the artist.
			fartist="$uploader"
		fi

		fyear="${date:0:4}"
		fuploader=$(echo $uploader | awk '{$1=$1}1')

		editfile="$CACHE_DIR/$id.info.edits.json"
		if [[ -f $editfile ]]
		then
			ftitle="$(jq -rj '.title' $editfile)"
			fartist="$(jq -rj '.artist' $editfile)"
		fi

		# Only prompt if stdin is not coming from a pipe.
		if [[ ! -p /dev/stdin ]]
		then
			echo "################################"
			echo -e "title:\t\t$ftitle\nartist:\t\t$fartist\nyear:\t\t$fyear\nuploader:\t$fuploader"
			echo "################################"
			read ans"?Do you want to edit? [y/n] "
			if [[ "$ans" = "y" ]]
			then
				echo "{\"title\":\"$ftitle\",\"artist\":\"$fartist\"}" | jq . > $editfile
				$EDITOR $editfile
				ftitle="$(jq -rj '.title' $editfile)"
				fartist="$(jq -rj '.artist' $editfile)"
			fi
		fi
		songs+=("$ftitle" "$fartist" "$fyear")
	fi
done

# Do the actual conversion
successes=()
errors=()
mkdir -p "$MUSIC_DIR"
i=0
for id in "${ids[@]}"; do
	if [[ -f $CACHE_DIR/$id.info.json ]]
	then
		ii=$((i * 3))
		title=${songs[$(($ii + 1))]}
		artist=${songs[$(($ii + 2))]}
		year=${songs[$(($ii + 3))]}

		filename="$(echo $artist-$title | tr -cd 'a-zA-Z0-9_ -' | tr -s ' ' _)"
		filepath="$MUSIC_DIR/$filename.$AUDIO_FMT"

		if [[ -f $filepath ]] || [[ ! -f $CACHE_DIR/$id.$AUDIO_FMT ]]
		then
			# File already exists.
			errors+=("$artist - $title")
		else
			cp "$CACHE_DIR/$id.$AUDIO_FMT" "$filepath"

			id3v2 --id3v2-only \
				--song "$title" \
				--artist "$artist" \
				--year "$year" \
				--comment ":Downloaded from youtube.com at $(date -I) ($id):eng" \
				"$filepath"

			successes+=("$artist - $title")
		fi
	fi
	i=$(($i + 1))
done

# Print statuses after completion.
echo "==============================="
echo "Downloaded:"
for suc in "${successes[@]}"
do
	echo "* $suc"
done
echo "==============================="

echo "Failed (already exists):"
for err in "${errors[@]}"
do
	echo "* $err"
done
echo "==============================="

exit 0
