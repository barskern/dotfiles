#!/bin/sh
#
# nat-from-to
#

print_help()
{
    local help_string
    read -d '' help_string <<- EOF
usage: nat-from-to [-h] {-t|-s} -i <internal> -e <external> [-n <subnet>]
usage: nat-from-to [--help] {--takedown|--setup} --internal <internal> --external <external> [--subnet <subnet>]

Setup a NAT forwarding from and internal device to an external device. Useful to grant another machine passthrough network access through the host machine.

NB! No DHCP server or IP assignment is done through the script, hence that needs to be done manually on the connected machine. If the subnet argument is passed, the only needed configuration is on the connected machine which then needs to specify a static IP within the given subnet and set a default route to the host machine.

Example:

Create a NAT that lets all clients connected to wlan0 use our ip-address to communicate on wlan1:
    nat-from-to -s -i wlan0 -e wlan1

In addition, if subnet is specified, run the commands to set a static IP for our internal device (always the first address in the subnet) and add the needed route to send packets back to the internal network:
    nat-from-to -s -i wlan0 -e wlan1 -n 10.0.0.0/24

Takedown previously created NAT:
    nat-from-to -t -i wlan0 -e wlan1
EOF
    echo "$help_string"
}

INTERNAL=false
EXTERNAL=false
SETUP=false
TAKEDOWN=false
SUBNET=false

while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -n|--subnet)
        SUBNET="$2"
        shift # past argument
        shift # past value
        ;;
        -e|--external)
        EXTERNAL="$2"
        shift # past argument
        shift # past value
        ;;
        -i|--internal)
        INTERNAL="$2"
        shift # past argument
        shift # past value
        ;;
        -s|--setup)
        SETUP=true
        shift # past argument
        ;;
        -t|--takedown)
        TAKEDOWN=true
        shift # past argument
        ;;
        -h|--help)    # unknown option
        print_help
        exit 0
        ;;
        *)    # unknown option
        shift # past argument
        ;;
    esac
done

if [[ "$INTERNAL" == false ]]; then echo -e "Specify internal interface (-i|--internal)\n"; print_help; exit 1; fi
if [[ "$EXTERNAL" == false ]]; then echo -e "Specify external interface (-e|--external)\n"; print_help; exit 1; fi

# Setup or take down based on options
if [[ "$SETUP" == true ]]; then
    sysctl -w net.ipv4.ip_forward=1

    iptables --table nat --append POSTROUTING \
        --out-interface ${EXTERNAL} \
        --jump MASQUERADE

    iptables --table filter --append FORWARD \
        --in-interface ${EXTERNAL} --out-interface ${INTERNAL} \
        --match state --state RELATED,ESTABLISHED \
        --jump ACCEPT

    iptables --table filter --append FORWARD \
        --in-interface ${INTERNAL} --out-interface ${EXTERNAL} \
        --jump ACCEPT
elif [[ "$TAKEDOWN" == true ]]; then
    sysctl -w net.ipv4.ip_forward=0

    iptables --table nat --delete POSTROUTING \
        --out-interface ${EXTERNAL} \
        --jump MASQUERADE

    iptables --table filter --delete FORWARD \
        --in-interface ${EXTERNAL} --out-interface ${INTERNAL} \
        --match state --state RELATED,ESTABLISHED \
        --jump ACCEPT

    iptables --table filter --delete FORWARD \
        --in-interface ${INTERNAL} --out-interface ${EXTERNAL} \
        --jump ACCEPT
   else
    echo "Specify either [-t|--takedown] or [-s|--setup] to either set up or take down connection"
fi

if [[ "$SUBNET" != false ]]; then
	IP_REGEX='([0-9]{1,3}\.){3}[0-9]{1,3}'

	subnet_ip=$(echo $SUBNET | grep -oE $IP_REGEX)
	subnet_cidr=$(
		echo $SUBNET \
		| grep -oE "$IP_REGEX/[0-9]{1,2}" \
		| sed 's/.*\/\([0-9]\{2\}\)/\1/' \
	)
	if [[ -z "$subnet_ip" ]] || [[ -z "$subnet_cidr" ]]; then
		echo "Invalid subnet specified, must be: <ip>/<cidr>"
		exit 1
	fi

	host_ip="$(echo $SUBNET | grep -oE '([0-9]{1,3}\.){3}')1"

	echo "Setting up subnet IP $subnet_ip with host IP as $host_ip"
	ip address add $host_ip dev $INTERNAL
	ip route replace $SUBNET dev $INTERNAL
fi

